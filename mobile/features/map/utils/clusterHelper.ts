import SuperCluster from 'supercluster';
import { IPlace } from '../../../types/Place';
import { Platform } from 'react-native';

export type Coordinates = { lat: number; lng: number };

const latToLngToPlace = new Map<number, Map<number, IPlace>>(); // {lat: {lng: place}}, used to get place from lat and lng

/**
 * Initialize latToLngToPlace map with places. If the map is already initialized, nothing will happen.
 * @param places The places to initialize the map with.
 */
const initLatToLngToPlace = (places: any) => {
    if (latToLngToPlace.size > 0) return;
    for (const place of places.values()) {
        const lat = place.location.lat;
        const lng = place.location.lng;

        if (!latToLngToPlace.has(lat)) latToLngToPlace.set(lat, new Map<number, IPlace>());
        latToLngToPlace.get(lat)?.set(lng, place);
    }
};

export function handleMarkerPress(place: any, setSelectedPlaceId: any, mapViewRef: any, bottomSheetRef: any, currentIndex: number) {
    setSelectedPlaceId(place._id);
    if (bottomSheetRef.current && currentIndex < 1) {
        bottomSheetRef.current.snapToIndex(1);
    }
    animateTo(place.location.lat, place.location.lng, mapViewRef);
}

export async function animateTo(lat: number, lng: number, mapViewRef: any) {
    const region = {
        latitude: lat,
        longitude: lng,
    };

    if (mapViewRef.current) {
        const camera = await mapViewRef.current.getCamera();
        const zoomLevel = Platform.OS === 'ios' ? camera.altitude : camera.zoom;
        region.latitude -= 0.00006 + ((0.035 - 0.00006) * (zoomLevel - 82.2)) / (48000 - 82.2); // Generated by co-pilot lol

        mapViewRef.current.animateToRegion(region);
    }
}

export const getClusterPlaces = (
    cluster: any,
    places: Map<string, IPlace>,
    superClusterRef: React.MutableRefObject<SuperCluster<SuperCluster.AnyProps, SuperCluster.AnyProps>>
) => {
    initLatToLngToPlace(places);
    const coordinates = getClusterChildrenCoordinates(cluster.id, superClusterRef);

    const placesArray: IPlace[] = [];
    coordinates.map((coordinate: number[]) => {
        const place = latToLngToPlace.get(coordinate[1])?.get(coordinate[0]);
        if (place) placesArray.push(place);
    });

    return placesArray;
};

const getClusterChildrenCoordinates = (
    cluster_id: any,
    superClusterRef: React.MutableRefObject<SuperCluster<SuperCluster.AnyProps, SuperCluster.AnyProps>>,
    children: any[] = []
) => {
    // add recursion base case
    if (superClusterRef.current.getChildren(cluster_id).length === 0) {
        return children;
    }

    superClusterRef.current.getChildren(cluster_id).forEach((child: any) => {
        child.properties.point_count === 0
            ? children.push(child.geometry.coordinates)
            : getClusterChildrenCoordinates(child.properties.cluster_id, superClusterRef, children);
    });

    return children;
};
